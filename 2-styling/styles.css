/*
  A styling file has a set of styling ruleset by selectors
  
  - First you add the selector to change its style (before open its curly braces
  - Then, you add the property and change in a name/value pair, this is also called a rule
  - At last, you will write a list of rules inside a selector is a ruleset

  p {
    font-family: Roboto
  }
*/

/* An important sidenote. Have in mind that all rules applied to selectors will also impact in its children elements */

/* The '*' or 'universal' selector applies its styles to every elment in the browser */
/*
  * {
    font-weight: bold;
  }
*/

/*
  The 'attribute' selector is used to be applied on those elements which property has a specific value
  - In case you want to select by a specific value, you can use something like [lang="es"], where is [variable=value]
  - In case you sant to select those which have a token (string value) among all (like a class among several ones), use [class~="class-value"]
*/
/*
  [class~="resume-list"] {
    font-style: italic;
  }
*/

/*
  The '#' or 'id' selector is used to locate those elements with the specific id, you can use it like #id-value
*/
/* #skills {
  font-weight: bold;
} */

/*
  A '.' or 'class' selector is a shortcut used to select elements with a specific class or list of classes using a dot after the element (or another class) and before the class you want to add

  *.resume-list => all elements with 'resume-list' class

  *.resume-list.skills => all elements with 'resume-list' and 'skill' class
*/
ul.resume-list {
  font-style: italic;
}

/*
  ',' or 'groups of selectors' is used to apply in several elements by reducing duplicated code
  If one of the grouped elements is invalid (is not an CSS rule or element), the rule will be disabled
*/
/*
  On this example, you can see that the selectors could be any valid type and can be grouped to apply the same styling

  ul[lang], ol.resume-list, p {
    font-weight: bold;
  }
*/
ul, ol {
  font-weight: bold;
}

/*
  What is a combinator? Is a token that helps combining various selectors to get a more specific selection
*/
/*
  A ' ' or 'descendant' combinator is used from right to left, taking as first point the element you are selecting and at its left, its ancestors
  What it means is that it will select only those elements which ha a specific ancestor element
*/
blockquote p {
  font-weight: bold;
}

/*
  A '>' or 'child' combinator is used for direct children of the element you want to select
  The main difference with desendant combinator is that a child is used for direct children (at 1 level) and not below that (where we use the other combinator)
*/
form > p {
  font-weight: bold;
}

/*
  A '+' or 'next sibiling' combinator is used for those element which are next to the one reffered (at the same tree level)
  
  On this case, you will only select the first blockquote element next to any h2, but it will not select other blockquotes

  h2 + blockquote {
    font-style: oblique;
  }
*/
/*
  A ~ or subsequent sibiling combinator is used to select all sibiling elements (defined at right) which are next to the other element (defined at left)
*/
h2 ~ blockquote {
  font-style: oblique;
}

/*
  'Pseudo Class' is a selection based on information related outside the document tree
  
  A 'child-indexed' pseudo class are the ones which select elements based on their index amongst their inclusive siblings
  On the case of 'nth-child(An+B)', the arguments are the following
  - Select the elements reffered by groups of A (in number)
  - Set in +B Which one is selected of the groups
  - In the following example you will want to select the first element of groups of 2
  - You can also make a shortcut of select the odd or event element of a list, like ':nth-child(odd)'
*/
/*
  li:nth-child(2n+1) {
    color: red;
  }
*/

/*
  'nth-of-type' is similar to previous rule because is using the same type of arguments, but it checks on the selected elements, but does not work on its children, but in the element/s itself
*/
/*
  #aboutme p:nth-of-type(odd) {
    color: blue;
  }
*/

/*
  Location pseudo classes, based on links (like its status)
  - 'visited' is used to mark when a link has been visited
  - 'focus' is used when a link is been focused by the page (like when you tab to select a specific element only using your keyboard)
  - 'hover' is used when your the user hover its pointer to a 
*/
/*
  a:visited,
  a:focus,
  a:hover {
    color: red;
  }

  input:focus,
  select:focus {
    outline: 2px solid red;
  }
*/

/*
  ':not' or 'negation matcher' is used to search for those elements which ARE NOT related to the search parameter you add between parenthesis
*/
/*
  section:not(#testimonials) {
    font-style: italic;
  }
*/

/*
  Pseudo elements is reffered abstract elements of the documents that are not restricted to fitting into the document tree structure
  A thing to have in mind, its sintaxis uses two colons (::) instead one (:) like are used in pseudo classes.
  - first-letter selects just the first letter on the element you reffered before
*/
p::first-letter {
  font-weight: bolder;
}