/*
  A styling file has a set of styling ruleset by selectors
  
  - First you add the selector to change its style (before open its curly braces
  - Then, you add the property and change in a name/value pair, this is also called a rule
  - At last, you will write a list of rules inside a selector is a ruleset

  p {
    font-family: Roboto
  }
*/

/* An important sidenote. Have in mind that all rules applied to selectors will also impact in its children elements */

/* The '*' or 'universal' selector applies its styles to every elment in the browser */
/*
  * {
    font-weight: bold;
  }
*/

/*
  The 'attribute' selector is used to be applied on those elements which property has a specific value
  - In case you want to select by a specific value, you can use something like [lang="es"], where is [variable=value]
  - In case you sant to select those which have a token (string value) among all (like a class among several ones), use [class~="class-value"]
*/
/*
  [class~="resume-list"] {
    font-style: italic;
  }
*/

/*
  The '#' or 'id' selector is used to locate those elements with the specific id, you can use it like #id-value
*/
#skills {
  font-weight: bold;
}

/*
  A '.' or 'class' selector is a shortcut used to select elements with a specific class or list of classes using a dot after the element (or another class) and before the class you want to add

  *.resume-list => all elements with 'resume-list' class

  *.resume-list.skills => all elements with 'resume-list' and 'skill' class
*/
ul.resume-list {
  font-style: italic;
}

/*
  ',' or 'groups of selectors' is used to apply in several elements by reducing duplicated code
  If one of the grouped elements is invalid (is not an CSS rule or element), the rule will be disabled
*/
/*
  On this example, you can see that the selectors could be any valid type and can be grouped to apply the same styling

  ul[lang], ol.resume-list, p {
    font-weight: bold;
  }
*/
ul, ol {
  font-weight: bold;
}

/*
  What is a combinator? Is a token that helps combining various selectors to get a more specific selection
*/
/*
  A ' ' or 'descendant' combinator is used from right to left, taking as first point the element you are selecting and at its left, its ancestors
  What it means is that it will select only those elements which ha a specific ancestor element
*/
blockquote p {
  font-weight: bold;
}

/*
  A '>' or 'child' combinator is used for direct children of the element you want to select
  The main difference with desendant combinator is that a child is used for direct children (at 1 level) and not below that (where we use the other combinator)
*/
form > p {
  font-weight: bold;
}

/*
  A '+' or 'next sibiling' combinator is used for those element which are next to the one reffered (at the same tree level)
  
  On this case, you will only select the first blockquote element next to any h2, but it will not select other blockquotes

  h2 + blockquote {
    font-style: oblique;
  }
*/
/*
  A ~ or subsequent sibiling combinator is used to select all sibiling elements (defined at right) which are next to the other element (defined at left)
*/
h2 ~ blockquote {
  font-style: oblique;
}